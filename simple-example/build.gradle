apply plugin: 'com.android.application'
apply plugin: 'weaver'

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.3"

    defaultConfig {
        applicationId "de.hda.simple_example"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'org.robolectric:robolectric:3.1.4'
    testCompile "org.robolectric:shadows-support-v4:3.1.4"
    testCompile 'org.mockito:mockito-core:2.1.0-beta.120'
    testCompile 'junit:junit:4.12'
    testCompile 'com.google.dagger:dagger:2.7'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    compile 'com.android.support:design:24.2.1'
    compile 'com.squareup.retrofit2:retrofit:2.1.0'
    compile 'com.squareup.retrofit2:converter-gson:2.1.0'
    compile 'com.google.code.gson:gson:2.7'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile project(':app')
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'
    annotationProcessor project(':mvp-annotation-processor')
    testAnnotationProcessor project(':mvp-annotation-processor')
    androidTestAnnotationProcessor project(':mvp-annotation-processor')
    weaver project(':mvp-annotation-processor')
}

afterEvaluate {
    android.buildTypes.all { variant ->
        android.sourceSets.test.java.srcDirs += ("$buildDir/generated/source/apt/test/$variant.name")
    }
}

afterEvaluate {
    android.buildTypes.all { variant ->
        def u = "compile${variant.name.capitalize()}UnitTestJavaWithJavac"
        logger.info(u)
        def unitTestGenerateClassesTask = tasks.findByName(u)
        logger.info(unitTestGenerateClassesTask != null ? unitTestGenerateClassesTask.name : "unitTestGenerateClassesTask is null")
        def g = "assemble${variant.name.capitalize()}"
        def generateClassesTask = tasks.findByName(g)
        logger.info(g)
        logger.info(generateClassesTask != null ? generateClassesTask.name : "generateClassesTask is null")
        if (generateClassesTask != null && unitTestGenerateClassesTask != null)
            generateClassesTask.dependsOn unitTestGenerateClassesTask
    }
}


/*afterEvaluate {
    android.buildTypes.all { variant ->
        def taskName = "injectAdditionalSourceFiles${variant.name.capitalize()}"
        task "$taskName" << {
            def directory = "$buildDir/generated/source/apt/test/$variant.name"
            logger.info(directory)
            android.sourceSets.test.java.srcDirs = [file('src/test/java')]
        }
        def t = "generate${variant.name.capitalize()}BuildConfig"
        tasks.findByName(t).dependsOn "$taskName"
    }
}*/